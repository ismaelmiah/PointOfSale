// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PointOfSale.Foundation.Contexts;

namespace PointOfSale.Web.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    [Migration("20210617175125_Product_Name_Field_Added")]
    partial class Product_Name_Field_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PointOfSale.Foundation.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Invest")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NoOfProduct")
                        .HasColumnType("integer");

                    b.Property<double>("Sales")
                        .HasColumnType("double precision");

                    b.Property<int>("StockProduct")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PointOfSale.Foundation.MonthDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfDetails")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Invest")
                        .HasColumnType("double precision");

                    b.Property<double>("Loss")
                        .HasColumnType("double precision");

                    b.Property<double>("Profit")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("MonthDetails");
                });

            modelBuilder.Entity("PointOfSale.Foundation.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PointOfSale.Foundation.SaleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("PointOfSale.Foundation.MonthDetail", b =>
                {
                    b.HasOne("PointOfSale.Foundation.Category", "Category")
                        .WithOne("MonthDetail")
                        .HasForeignKey("PointOfSale.Foundation.MonthDetail", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PointOfSale.Foundation.Product", b =>
                {
                    b.HasOne("PointOfSale.Foundation.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PointOfSale.Foundation.SaleDetail", b =>
                {
                    b.HasOne("PointOfSale.Foundation.Product", "Product")
                        .WithOne("SaleDetail")
                        .HasForeignKey("PointOfSale.Foundation.SaleDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PointOfSale.Foundation.Category", b =>
                {
                    b.Navigation("MonthDetail");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PointOfSale.Foundation.Product", b =>
                {
                    b.Navigation("SaleDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
